from game.model.Resources import Resources
from model.List import List
from random import random

class _Facility :
	"""
	This abstract class represents a facility which can be built buy a player.
	A facility can generate resources each turn, or give special actions (by checking if the player's facilities' list
	contains a certain instance of object).
	"""

	def __init__(self, name : str, cost : Resources|None, gain : Resources|int|None, frequency : int) :
		self.name = name
		self.cost = cost
		self.gain = gain
		self.frequency = frequency
		
		self.state = 0
	
	def promptSummary(self) -> None :
		"""
		Prompts resumed informations about the facility
		"""
		print(f"{self.name.ljust(20)}{self.state}/{self.frequency}")

	def promptDetails(self) -> None :
		"""
		Prompts detailed informations about the facility
		"""
		print(
			f"{self.name}\n\n"
			f"CoÃ»t :                    [ {self.cost}]\n"
			f"Gain :                    [ {self.gain}] / {self.frequency} tour(s)\n"
		)
	
	def getGain(self) -> Resources|int|None :
		"""
		Returns the resources or abstract value generated by this facility.
		"""
		if self.frequency != 0 :
			if self.state == self.frequency :
				self.state = 1
				return self.gain
			else :
				self.state += 1
				return None

class Farm(_Facility) :

	def __init__(self) :
		super().__init__("Ferme", None, Resources(food=6), 3)

class Habitation(_Facility) :

	def __init__(self) :
		super().__init__("Habitation", None, None, 0)
		self.given = False
	
	def getGain(self) -> Resources|int|None :
		if not self.given :
			self.given = True
			return 4
		return None

class Baracks(_Facility) :

	def __init__(self) :
		super().__init__("Caserne", None, None, 0)
		self.troups = List()

	def getGain(self) -> Resources|int|None :
		return None
	
	def promptTroups() -> None :
		print(f"Barack | CAP {self.troups.len}/4")

class Mine(_Facility) :

	def __init__(self) :
		super().__init__("Mine", None, None, 2)
		self.stoneRatio = (random() * 10) % 5 + 1
		self.ironRatio = (random() * 10) % 5 + 1

	def getGain(self) -> Resources|int|None :
		return Resources(stone=self.stoneRatio, iron=self.stoneRatio)

class Forge(_Facility) :

	def __init__(self) :
		super().__init__("Forge", None, None, 0)

class Sawmill(_Facility) :

	def __init__(self) :
		super().__init__("Scierie", None, Resources(wood=5), 1)

class HunterHood(_Facility) :

	def __init__(self) :
		super().__init__("Ferme", None, Resources(food=2), 1)

class Temple(_Facility) :

	def __init__(self) :
		super().__init__("Temple", None, Resources(knowledge=2), 1)

class Altar(_Facility) :

	def __init__(self) :
		super().__init__("Autel", None, None, 0)