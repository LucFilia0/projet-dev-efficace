from game.model.Facility import _Facility
from game.model.Facility import Habitation
from game.model.Facility import Farm
from model.List import List, ListDeCon
from game.view.prompt import padNumber
from game.model.Resources import Resources
from game.model.TechnologyTree import TechnologyTree

class Player :
	"""
	This class represents a player which is playing the game.
	A player has a name, a city, resources, technologies and bonuses.
	"""

	def __init__(self) :
		self.name = None
		self.city = None
		self.resources = Resources(wood=10, stone=5, food=10, knowledge=3)
		self.technoTree = TechnologyTree(self)
		self.unlockedTroups = List()
		self.bonus = Resources()
		
	def __str__(self) -> str :
		return self.name

	def createStartingFacilities(self) -> None :
		"""
		Creates all the starting facilities the player gets at the beginning of the campaign.
		"""
		self.city.facilities.add(Habitation()) # Je suis une merde T-T
		self.city.facilities.add(Farm())
	
	def collectResources(self) -> None :
		"""
		Collects all the resources generated by each of its facilities.
		This function is called each turn.
		"""
		length = self.city.facilities.len
		for i in range(length) :
			gain = self.city.facilities.get(i).getGain()
			if isinstance(gain, int) :
				self.city.maxPopulation += gain # Case of habitations
			else :
				self.resources.add(gain)
			self.resources.knowledge += 1
	
	def consumeFood(self) -> bool :
		"""
		Deduces the food amount, based on the current player's city's population.
		:return: bool True if there is no food available, else False if everything is ok
		"""
		self.resources.food -= self.city.population
		if self.resources.food < 0 :
			return True
		return False